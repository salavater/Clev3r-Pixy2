import "Pixy2"

Program.Delay(100)

#region functions for printing

Function printPixel2x2(in number x, in number y, in number type)
  
  If type = 1 Then
    LCD.Pixel(1,x,y+1)
  EndIf
  If type = 2 Then
    LCD.Pixel(1,x,y+1)
    LCD.Pixel(1,x+1,y)
  EndIf
  If type = 3 Then
    LCD.Pixel(1,x,y)
    LCD.Pixel(1,x+1,y)
    LCD.Pixel(1,x+1,y+1)
  EndIf
  If type = 4 Then
    LCD.Pixel(1,x,y)
    LCD.Pixel(1,x+1,y)
    LCD.Pixel(1,x,y+1)
    LCD.Pixel(1,x+1,y+1)
  EndIf
  
EndFunction

Function lineForFile(in number type, in string lineIn, out string lineOut)
  
  If type = 0 Then
    lineOut = lineIn + " "
  EndIf
  If type = 1 Then
    lineOut = lineIn + "."
  EndIf
  If type = 2 Then
    lineOut = lineIn + ":"
  EndIf
  If type = 3 Then
    lineOut = lineIn + "!"
  EndIf
  If type = 4 Then
    lineOut = lineIn + "@"
  EndIf
  If type = 5 Then
    lineOut = lineIn + "r"
  EndIf
  If type = 6 Then
    lineOut = lineIn + "("
  EndIf
  If type = 7 Then
    lineOut = lineIn + "l"
  EndIf
  If type = 8 Then
    lineOut = lineIn + "1"
  EndIf
  If type = 9 Then
    lineOut = lineIn + "Z"
  EndIf
  If type = 10 Then
    lineOut = lineIn + "4"
  EndIf
  If type = 11 Then
    lineOut = lineIn + "H"
  EndIf
  If type = 12 Then
    lineOut = lineIn + "9"
  EndIf
  If type = 13 Then
    lineOut = lineIn + "W"
  EndIf
  If type = 14 Then
    lineOut = lineIn + "8"
  EndIf
  If type = 15 Then
    lineOut = lineIn + "$"
  EndIf
  If type = 16 Then
    lineOut = lineIn + "@"
  EndIf
  
EndFunction

Function progressBarStart(in number x, in number y)
  
  @prBarStartX = x
  @prBarStartY = y
  
  LCD.Text(1, @prBarStartX + 10, @prBarStartY, 1, "Progress:")
  LCD.Rect(1, @prBarStartX, @prBarStartY + 10, 100, 10)
EndFunction

Function progressBarUpdate(in number value, in number maxValue)
  percent = value / maxValue
  
  'LCD.Text(1,1,1,1,value)
  'LCD.Text(1,1,11,1,maxValue)
  'LCD.Text(1,1,21,1,percent*100)
  
  LCD.Line(1,@prBarStartX + percent*100, @prBarStartY + 10, @prBarStartX + percent*100, @prBarStartY + 10 + 8)
EndFunction

Sub WB 'wait buttons ;)
  Speaker.Tone(@volume,1200,100)
  Program.Delay(150)
  Speaker.Tone(@volume,1200,100)
  
  Buttons.Flush()
  Buttons.Wait()
EndSub

#endRegion

#region print resolution
Pixy2.getRGB(2,84,2,2,0,r,g,b)
Pixy2.getResolution(2,84,weight,height)

LCD.Clear()
LCD.Text(1,40,20,1,"Resolution:")
LCD.Text(1,40,30,1,"Weight: " + weight)
LCD.Text(1,40,40,1,"Height: " + height)
LCD.Text(1,20,60,1,"Resolution must ")
LCD.Text(1,40,75,1,"be 315/208")
LCD.Text(1,20,95,1,"Press any button")

Buttons.Flush()
Buttons.Wait()
#endRegion

'start program'
@volume = 20

Pixy2.setLamp(2,84,1,1)

kx = 2
ky = 2
pic[0] = 0
arrayR[0] = 0
arrayG[0] = 0
arrayB[0] = 0

xResolution = 62'62
yResolution = 41'41

xShift = 32
yShift = 8

#region taking photo
Time.Reset1()

maxGray = 0
minGray = 1

LCD.Clear()
LCD.Rect(1,xShift-2, yShift-2, xResolution*kx+4, yResolution*ky+4)

progressBarStart(42,100)

For yStep = 0 To yResolution
  For xStep = 0 To xResolution
    
    x = 2 + xStep * 5
    y = 2 + yStep * 5
    
    Pixy2.getRGB(2,84,x,y,0,r,g,b)
    
    gray = (r+g+b)/765 ' value 0-1
    
    i = yStep*xResolution+xStep
    pic[i] = gray
    
    arrayR[i] = r
    arrayG[i] = g
    arrayB[i] = b
    
    If gray > maxGray Then
      maxGray = gray
    EndIf
    If gray < minGray Then
      minGray = gray
    EndIf
    
    type = 4 -  Math.Round((gray-minGray)/(maxGray - minGray) * 5 - 0.51)
    printPixel2x2(xShift + xStep*kx, yShift + yStep*ky, type)
    
    progressBarUpdate(i, yResolution*xResolution + xResolution)
    
    Program.Delay(30)
    
  EndFor
  Speaker.Tone(@volume,1200,100)
EndFor

LCD.Text(1,1,1,6,Math.Round(Time.Get1()/1000))
WB()
#endRegion

#region reprint photo

LCD.Clear()
LCD.Rect(1,xShift-2, yShift-2, xResolution*kx+4, yResolution*ky+4)

progressBarStart(42,100)

For yStep = 0 To yResolution
  For xStep = 0 To xResolution
    
    i = yStep*xResolution+xStep
    gray = pic[i] ' value 0-1
    
    type = 4 -  Math.Round((gray-minGray)/(maxGray - minGray) * 5 - 0.51)
    printPixel2x2(xShift + xStep*kx, yShift + yStep*ky, type)
    
    progressBarUpdate(i, yResolution*xResolution + xResolution)
    
    'Program.Delay(10)
  EndFor
EndFor

WB()
#endRegion

#region save photo to txt file in char

char_f = EV3File.OpenWrite("char_picture.txt")

LCD.Clear()
LCD.Text(1,11,21,1,"Saving in char file")
progressBarStart(42,40)

For yStep = 0 To yResolution
  char_line = ""
  For xStep = 0 To xResolution
    
    i = yStep*xResolution+xStep
    gray = pic[i] ' value 0-1
    
    type = 4 -  Math.Round((gray-minGray)/(maxGray - minGray) * 5 - 0.51)
    lineForFile(type, char_line, char_line)
    
    progressBarUpdate(i, yResolution*xResolution + xResolution)
    
  EndFor
  EV3File.WriteLine(char_f,char_line)
EndFor

EV3File.Close(char_f)
WB()
#endRegion

#region save photo in rgb to txt file

LCD.Clear()
LCD.Text(1,11,21,1,"Saving in rgb file")
progressBarStart(42,40)

rgb_f = EV3File.OpenWrite("rgb.txt")

EV3File.WriteLine(rgb_f,xResolution + " " + yResolution)

For yStep = 0 To yResolution
  
  For xStep = 0 To xResolution
    
    i = yStep*xResolution+xStep
    gray = pic[i] ' value 0-1
    
    rgb_line = EV3File.ConvertToNumber(arrayR[i]) + " " + EV3File.ConvertToNumber(arrayG[i] )+ " " + EV3File.ConvertToNumber(arrayB[i]) + " "
    EV3File.WriteLine(rgb_f,rgb_line)
    
    progressBarUpdate(i, yResolution*xResolution + xResolution)
    
  EndFor
EndFor

EV3File.Close(rgb_f)

WB()

#endRegion
